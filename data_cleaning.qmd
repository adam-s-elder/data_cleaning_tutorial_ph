---
title: "Data Cleaning Tutorial"
format: 
  revealjs:
    code-tools: true
    code-fold: false
    height: 1200
    width: 1500
---

```{r}
library(tidyverse)
```

# Preliminaries

## Why Learn to Program

There are many reasons to learn to program. Here I will lest what I think are the most compelling reasons why you should learn to program:

-   By programming (rather than using other tools such as excel) you create instantly repeatable presses which need far less human effort than other tools to update.
-   You carrying out your analysis and describing to others how to run the same analysis are done simultaneously.
-   The process you use (and describe) is unambiguous and can be adopted and scrutinized by others.
-   You gain access to many tools and efficiencies that would otherwise be unavailable.

## Why use R

While many programming languages provide many useful tools to for conducting data analysis, R has been designed differently than other programming languages in some important ways:

-   While many programming languages build functions around operations on single values, R focuses more on functions that act on entire vectors of values which is quite useful for simplifying code and conducting data analyses.
-   R has a community that is dedicated to high quality, open source software and is the default language for multiple academic fields.

## Getting Started in R

I have found much of this authors writing very helpful. The book is online for free at <https://r4ds.had.co.nz/>. Another (free) book that gives more of background on R (and programming languages in general) is [Hands-On Programming with R](https://rstudio-education.github.io/hopr/).

::: {layout-ncol="2"}
![](https://d33wubrfki0l68.cloudfront.net/b88ef926a004b0fce72b2526b0b5c4413666a4cb/24a30/cover.png){width="50%"}

![](https://rstudio-education.github.io/hopr/cover.png){width="200%"}
:::

## Getting Started in R

On top of books there are many classes for learning R. I got my start by watching videos and doing the exercises from the [R Programming Course](https://www.coursera.org/learn/r-programming?action=enroll) provided on Corsera by Johns Hopkins. While it may seem like you are required to pay, it should be possible to take the course for free.

## Getting Started in R

I have heard from other individuals who have recently started learning how to code that [chatGPT](https://chat.openai.com) (or bing or [bard](https://bard.google.com/)). While these sources are not consistently accurate, they can often be a good place to start since they are easy to use and provide answers that are less cryptic than other resources. If an error is appearing you can try copying and pasting your code into the prompt and asking for why the error is appearing.

## R and R studio

![](https://raw.githubusercontent.com/adam-s-elder/data_cleaning_tutorial_ph/main/understanding_rstudio.png)

## Reading in data:

To read data into R, the "Files" pane can be used:

![](https://raw.githubusercontent.com/adam-s-elder/data_cleaning_tutorial_ph/main/import_data_1.png)

## Reading in data:

![](https://raw.githubusercontent.com/adam-s-elder/data_cleaning_tutorial_ph/main/import_data_2.png)

## Reading in data:
While the graphical user interface is can be used to read in data, in reality Rstudio using the interface to create an R command that is then passed to R.  In our case (instead of the dog dataset), we wish to read in the opioid dataset.  Using the graphical user interface creates multiple commands, the most important of them given here:

```{r}
#| echo: true
opioid_data <- read.csv("~/Desktop/file.nosync/opioid_data_05022023.csv")
```

## Setting a working directory in Rstudio

When reading and writing data into and from R, it is important to know the directory in which you are working. This tells R where it should look for files. The directory can be set in session \> Set Working Directory \> Choose Directory...

![](https://raw.githubusercontent.com/adam-s-elder/data_cleaning_tutorial_ph/main/set_wd.png)


## Writing (or saving) data:

While there is no graphical user interface for saving data-frames, they can be save to the same folder using the same file path that appeared in the console when reading in the data:

```{r}
#| echo: true
write.csv(opioid_data, "~/Desktop/file.nosync/opioid_data_05022023_new.csv")
```

# Cleaning Data

## Defining a question

We will be studying the relationship between opioid overdoses and various demographic factors. To do this, we will need clean versions of both the demographic information and the opioid overdose variable.

## Demographic factors

As an example of a function, `fivenum` provides a five number summary of a vector of values. Here, the `|>` characters tell R that the vector `opioid_data$Age` should be the first argument sent to `fivenum`.

```{r}
#| echo: true
opioid_data$Age |> fivenum()
```

## Cleaning the race variable

First, we use the `table()` function to show the counts of all possible categories:

```{r}
#| echo: true
opioid_data$c_race |> table(useNA = "always")
```

## Creating a new race variable

Here, we wish to collapse some of the variables into larger groups. Here, for the sake of an example, we will create 4 categories: White, AIAN, Black, and Other.

```{r}
#| echo: true
opioid_data$race_four <- case_when(
  opioid_data$c_race == "American Indian or Alaska Native" ~ "American Indian or Alaska Native",
  opioid_data$c_race == "White" ~ "White",
  opioid_data$c_race == "Black or African American" ~ "Black",
  TRUE ~ "Other"
)
table(opioid_data$race_four, useNA = "always")
```

## Creating a overdose variable

The functions used before naturally work for entire vectors of strings:

```{r}
#| echo: true
complaint <- unique(opioid_data$ChiefComplaintParsed)
complaint
```

## Creating an overdose variable

Unlike for the last variable, there are too many different values to simply reassign each value manually. Instead we will use string matching to create a binary variable for overdose. Because there are so many possible ways to describe an overdose using a chief complaint, it is important to check to make sure the new variable is an accurate representation of the old variable. This means:

-   For each complaint that is an overdose, the simplified variable is equal to `"overdose"` and
-   For each complaint that isn't an overdose, the simplified variable is equal to `"other"`

```{r}
#| echo: true
complaint_simplified <- case_when(
   grepl("OVERDOSE", complaint) ~ "overdose",
   grepl("POISINING", complaint) ~ "overdose",
   TRUE ~ "other"
)

data.frame("original" = substr(complaint, start = 1, stop = 50),
           "new" = complaint_simplified) |>
  filter(complaint_simplified == "other")
```

## Creating an overdose variable

Once new cases of overdose are found in the dataset, the code can be modified to properly include or exclude them:

```{r}
#| echo: true
complaint_simplified <- case_when(
   grepl("OXICODONE|SUBOXONE|HEROIN|OPIOID|NARCAN|DRUG|PILL", complaint) ~ "overdose",
   grepl("OVERDOSE", complaint) ~ "overdose",
   grepl("POISINING|POISONING", complaint) ~ "overdose",
   TRUE ~ "other"
)

data.frame("original" = substr(complaint, start = 1, stop = 50),
           "new" = complaint_simplified)  |> 
  arrange(complaint_simplified)
```

## Creating an opioid use surrogate

Next we will try and create a new variable that is a surrogate for overdose:

```{r}
#| echo: false
regex_str <- paste0(
  c("OXICODONE", "SUBOXONE", "HEROIN", "OPIOID",
    "NARCAN", "DRUG", "PILL", "OVERDOSE",
    "POISINING", "POISONING"), collapse = "|")

opioid_data <- opioid_data |>
  mutate(complaint_simplified = case_when(
    grepl(regex_str,ChiefComplaintParsed) ~ "overdose",
    TRUE ~ "other"
  )
  )
```

```{r}
#| echo: true
opioid_data$opioid_surrogate <-
  as.numeric(grepl("Poisoning", 
                   opioid_data$SubCategory_flat))
table("surogate" = opioid_data$opioid_surrogate, 
      "binary_overdose" = opioid_data$complaint)
```

## Investigating differences between the surrogate and constructed variable

```{r}
#| echo: true
opioid_data |> filter(
  opioid_surrogate == 1,
  complaint_simplified == "other") |> 
  select(ChiefComplaintParsed, complaint_simplified, opioid_surrogate)

opioid_data |> filter(
  opioid_surrogate == 0,
  complaint_simplified == "overdose") |> 
  select(ChiefComplaintParsed, complaint_simplified, opioid_surrogate)
```

## Splitting character delineated variables

Some variables are stored in dataset as a concatenated set of values

```{r}
#| echo: true
opioid_data$ICD_CCSR_Desc_Flat[1:10]
```

## Splitting character delineated variables

We will split the strings into a list of vectors, where each element of the vector is a diagnosis. To do this, we will split the string up using the `;` character. Unfortunately, there are other places in which the `;` character is used.

```{r}
#| echo: true
opioid_data$ICD_CCSR_Desc_Flat[3]
opioid_data$ICD_CCSR_Desc_Flat[3] |> str_split(";")
```

## Splitting character delineated variables

To account for this, we can specify that there must be a character that comes before and after the `;`. This almost fixes all of our problems, but we still want to remove the first and last `;` from the string since they are not needed:

```{r}
#| echo: true
opioid_data$ICD_CCSR_Desc_Flat[3]
opioid_data$ICD_CCSR_Desc_Flat[3] |> str_split("(?<=\\S);(?=\\S)")
```

## Splitting character delineated variables

```{r}
#| echo: true
opioid_data$ICD_CCSR_Desc_Flat[3] |> 
  substr(start = 2, stop = str_length(opioid_data$ICD_CCSR_Desc_Flat[3]) - 1) |>
  str_split("(?<=\\S);(?=\\S)")
```

## Splitting character delineated variables
Once a strategy is found for splitting up a single value, the same functions can be used for an entire vector of values

```{r}
#| echo: true
all_codes <- opioid_data$ICD_CCSR_Desc_Flat
all_codes[1:3] |> 
  substr(start = 2, stop = str_length(all_codes) - 1) |>
  str_split("(?<=\\S);(?=\\S)")
```

## Creating an opoid use variable

```{r}
#| echo: true
codes <- opioid_data$ICD_CCSR_Desc_Flat[3]
codes
codes <- codes |> substr(start = 2, stop = str_length(codes) - 1)
codes |> str_split("(?<=\\S);(?=\\S)")
```

# A brief data analysis

## Constructing descriptive tables

```{r}
#| echo: true
table("race" = opioid_data$race_four,
      "overdose" = opioid_data$complaint_simplified)
```

## Constructing descriptive tables

```{r}
#| echo: true
opioid_data |> group_by(race_four) |> 
  summarise("count" = n())
```

## Constructing descriptive tables

```{r}
#| echo: true
opioid_data |> group_by(race_four, complaint_simplified) |> 
  summarise("count" = n()) 
```

## Constructing descriptive tables

```{r}
#| echo: true
opioid_data |> group_by(race_four, complaint_simplified) |> 
  summarise("count" = n()) |>
  pivot_wider(id_cols = race_four, names_from = complaint_simplified,
              values_from = count)
table("race" = opioid_data$race_four,
      "overdose" = opioid_data$complaint_simplified)
```

## Constructing descriptive tables

```{r}
#| echo: true
opioid_data |> group_by(race_four, complaint_simplified) |> 
  summarise("count" = n()) |> group_by(race_four) |>
  mutate(percent = round(100 * count / sum(count), 2)) |> 
  pivot_wider(id_cols = race_four, names_from = complaint_simplified,
              values_from = percent)

opioid_data |> group_by(race_four, complaint_simplified) |> 
  summarise("Mean Age" = mean(Age)) |> 
  pivot_wider(id_cols = race_four, names_from = complaint_simplified,
              values_from = `Mean Age`)
```

## Constructing a plot

```{r}
#| echo: true
opioid_data |> ggplot(aes(x = Age, fill = complaint_simplified)) +
  geom_histogram(position = position_dodge()) + 
  theme(legend.position = "bottom")
```

```{r}
# codes <- opioid_data$ICD_CCSR_Desc_Flat
# codes <- codes |> substr(start = 2, stop = str_length(codes) - 1)
# split_codes <- codes |> str_split("(?<=\\S);(?=\\S)")
# split_codes[1:10]
# grepl("Opioid-related disorders", codes)
# complaint[grep("OVERDOSE", complaint)] |> table()
# 
# complaint_simplified <- case_when(
#   grepl("OVERDOSE", complaint) ~ "overdose",
#   grepl("POISINING", complaint) ~ "overdose",
#   grepl("DRUG ABUSE PERCOCETS", complaint) ~ "overdose",
#   grepl("FENTANYL", complaint) ~ "overdose",
#   TRUE ~ "Other"
# )
# 
# pois <- opioid_data$SubCategory_flat
# poising_simplified <- case_when(
#   grepl(";Poisoning;", pois) ~ "poision",
#   TRUE ~ "Other"
# )
# 
# cleaned_variable <- data.frame(simplified = complaint_simplified,
#                                poising_simplified,
#                                Original = complaint)
# cleaned_variable[cleaned_variable$simplified != "overdose" & 
#                    poising_simplified == "poision", ] |> View()
# 
# cleaned_variable |> select(simplified, poising_simplified) |> table()
```
